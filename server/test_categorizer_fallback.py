#!/usr/bin/env python3
"""
Test showing the categorizer working as a fallback when parser confidence is low.
"""

import asyncio
import sys
from pathlib import Path

sys.path.append(str(Path(__file__).parent))

from test_categorizer_simple import SimpleMerchantCategorizer

async def test_categorizer_fallback():
    """Test categorizer with transactions that would have low parser confidence"""
    
    print("üöÄ Testing Categorizer Fallback for Unknown Merchants")
    print("=" * 60)
    
    categorizer = SimpleMerchantCategorizer()
    
    # Test cases where parser might not find merchants or have low confidence
    unknown_merchants = [
        "NEW LOCAL PIZZA PLACE",
        "UNKNOWN RESTAURANT DOWNTOWN", 
        "RANDOM SHOPPING MALL",
        "LOCAL GROCERY STORE",
        "NEIGHBORHOOD DOCTOR CLINIC",
        "SMALL CAFE NEARBY",
        "LOCAL GYM MEMBERSHIP",
        "UNKNOWN PHARMACY",
        "LOCAL TAXI SERVICE",
        "RANDOM STREAMING SERVICE"
    ]
    
    print("üß™ Testing unknown merchant categorization:")
    print("-" * 60)
    
    for merchant in unknown_merchants:
        try:
            result = categorizer.categorize_merchant(merchant)
            
            print(f"Merchant: {merchant}")
            print(f"  ‚úÖ Predicted Category: {result['category']}")
            print(f"  üìä Confidence: {result['confidence']:.3f} ({result['confidence_level']})")
            print(f"  üîÑ Needs Feedback: {'Yes' if result['needs_feedback'] else 'No'}")
            print(f"  ü§î Reasoning: {result['reasoning']}")
            if result['similar_merchants']:
                print(f"  üîó Similar Patterns: {', '.join(result['similar_merchants'][:3])}")
            print()
            
        except Exception as e:
            print(f"‚ùå Error categorizing {merchant}: {e}")
    
    print("=" * 60)
    print("üéØ Summary:")
    print("‚úÖ The categorizer successfully provides fallback categorization")
    print("‚úÖ It identifies which transactions need user feedback") 
    print("‚úÖ It explains its reasoning for transparency")
    print("‚úÖ It suggests similar patterns to help users understand the classification")
    print("\nüí° In a real system, transactions with 'needs_feedback=True' would be:")
    print("   ‚Ä¢ Flagged for manual review")
    print("   ‚Ä¢ Presented to users for correction")
    print("   ‚Ä¢ Used to improve the model through feedback")

if __name__ == "__main__":
    asyncio.run(test_categorizer_fallback())
